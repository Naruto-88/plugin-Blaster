"use client"
import { trpc } from '@/lib/trpc'
import { useSitesFilters } from '@/store/sitesFilters'
import { FixedSizeList as List } from 'react-window'
import InfiniteLoader from 'react-window-infinite-loader'
import { severityFor } from '@nsm/core'
import { useEffect, useMemo, useRef, useState } from 'react'
import SiteForm from '@/components/SiteForm'
import { motion } from '@motionone/react'
import { StatusChip } from '@/components/StatusChip'
import { useSessionRole } from '@/lib/session'
import { toast } from 'sonner'
import { Button } from '@/components/ui/button'
import { Checkbox } from '@/components/ui/checkbox'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { TooltipProvider, Tooltip, TooltipTrigger, TooltipContent } from '@/components/ui/tooltip'

export default function SitesPage() {
  const { q, tags, statuses, page, pageSize, setQ, setTags, toggleStatus, setPage, setPageSize, reset } = useSitesFilters()
  const [showCreate, setShowCreate] = useState(false)
  const [accum, setAccum] = useState<any[]>([])
  const { data, isLoading, isFetching } = trpc.sites.list.useQuery({ q, tags, statuses, page, pageSize, sort: 'createdAt', order: 'desc' }, { keepPreviousData: true })
  const total = data?.total ?? 0
  const totalPages = Math.max(1, Math.ceil(total / pageSize))
  const items = accum

  // Reset accum when filters change
  const prevKey = useRef<string>('')
  const key = JSON.stringify({ q, tags, statuses, pageSize })
  useEffect(() => {
    if (prevKey.current !== key) {
      prevKey.current = key
      setAccum([])
      setPage(1)
    }
  }, [key])
  useEffect(() => {
    if (data?.items) setAccum((cur) => {
      const map = new Map(cur.map((x:any)=>[x.id,x]))
      for (const it of data.items) map.set(it.id, it)
      return Array.from(map.values())
    })
  }, [data?.items])

  const Row = ({ index, style }: { index: number; style: any }) => {
    const s = items[index]
    const agg = {
      id: s.id,
      name: s.name,
      url: s.url,
      status: s.status,
      lastCheckedAt: s.lastCheckedAt ? new Date(s.lastCheckedAt) : null,
      hasAnyUpdate: s.hasAnyUpdate,
      hasSecurityUpdate: s.hasSecurityUpdate,
      hasChangelog: s.hasChangelog
    } as any
    const sev = severityFor(agg)
    const color = { red: 'bg-red-500', yellow: 'bg-yellow-400', green: 'bg-emerald-500', gray: 'bg-zinc-400' }[sev]
    return (
      <div style={style} className="px-2">
        <motion.div initial={{ opacity: 0, y: 6 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.2 }}>
          <div className="card px-4 py-3 grid grid-cols-[24px_2fr_3fr_120px_1fr_80px] items-center gap-3 hover:shadow-md transition-shadow">
            <Checkbox onCheckedChange={(v)=> toggleSelect(s.id, !!v)} checked={selected.has(s.id)} />
            <a href={`/sites/${s.id}`} className="font-medium truncate">{s.name}</a>
            <div className="text-xs text-zinc-500 truncate">{s.url}</div>
            <div className="flex items-center gap-2"><div className={`h-2 w-2 rounded-full ${color}`} /><StatusChip status={s.status as any} /></div>
            <div className="text-xs text-zinc-500">{s.lastCheckedAt ? new Date(s.lastCheckedAt).toLocaleString() : 'Never'}</div>
            <div className="justify-self-end flex items-center gap-2">
              {s.hasChangelog && <div title="Changelog available" className="h-2.5 w-2.5 rounded-full bg-fuchsia-500"></div>}
              {s._count?.logs ? <div className="text-[10px] rounded-full bg-zinc-200 dark:bg-zinc-800 px-2 py-0.5">{s._count.logs}</div> : null}
            </div>
          </div>
        </motion.div>
      </div>
    )
  }

  const statusesList = useMemo(() => ([
    { key: 'ok', label: 'OK' },
    { key: 'unreachable', label: 'Unreachable' },
    { key: 'auth_failed', label: 'Auth Failed' },
    { key: 'unknown', label: 'Unknown' },
  ]) as const, [])

  // selection state
  const [selected, setSelected] = useState<Set<string>>(new Set())
  const toggleSelect = (id: string, checked: boolean) => {
    setSelected(prev => {
      const s = new Set(prev)
      checked ? s.add(id) : s.delete(id)
      return s
    })
  }
  const trigger = trpc.checks.trigger.useMutation()
  const remove = trpc.sites.remove.useMutation()
  const bulkTag = trpc.sites.bulkTag.useMutation()
  const role = useSessionRole()
  const [bulkTagText, setBulkTagText] = useState('')

  return (
    <div className="p-6 space-y-4">
      <div className="flex items-center justify-between gap-3">
        <h1 className="text-2xl font-semibold">Sites</h1>
        <div className="flex items-center gap-2 ml-auto">
          <input className="rounded-lg border border-zinc-300 dark:border-zinc-700 bg-transparent px-3 py-2 w-64" placeholder="Search..." value={q} onChange={e => setQ(e.target.value)} />
          <input className="rounded-lg border border-zinc-300 dark:border-zinc-700 bg-transparent px-3 py-2 w-56" placeholder="Tags (comma)" onChange={e => setTags(e.target.value.split(',').map(t=>t.trim()).filter(Boolean))} />
          <Dialog open={showCreate} onOpenChange={setShowCreate}>
            <DialogTrigger asChild>
              <Button>Add Site</Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Add Site</DialogTitle>
              </DialogHeader>
              <SiteForm onDone={()=>setShowCreate(false)} />
            </DialogContent>
          </Dialog>
        </div>
      </div>

      <div className="flex flex-wrap gap-2">
        {statusesList.map(s => (
          <button key={s.key} onClick={() => toggleStatus(s.key as any)} className={`px-3 py-1 rounded-full text-sm border ${statuses.includes(s.key as any) ? 'bg-zinc-900 text-white dark:bg-zinc-100 dark:text-black' : 'bg-transparent'}`}>
            {s.label}
          </button>
        ))}
        <button onClick={reset} className="ml-2 text-sm text-zinc-600 underline">Reset</button>
      </div>

      <div className="card p-2 h-[70vh]">
        {/* Header row */}
        <div className="px-2 pb-2">
          <div className="grid grid-cols-[24px_2fr_3fr_120px_1fr_80px] text-xs text-zinc-500 px-4">
            <div></div>
            <div>Site Name</div>
            <div>URL</div>
            <div>
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <span className="inline-block cursor-default">Status</span>
                  </TooltipTrigger>
                  <TooltipContent>
                    <div className="space-y-1">
                      <div>Green: Up-to-date</div>
                      <div>Yellow: Updates available</div>
                      <div>Red: Security/unreachable/auth failed</div>
                      <div>Purple dot: Changelog detected</div>
                    </div>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>
            <div>Last Checked</div>
            <div>Badges</div>
          </div>
        </div>
        {isLoading && items.length===0 ? (
          <div className="p-6 text-sm text-zinc-500">Loading…</div>
        ) : (
          <InfiniteLoader
            isItemLoaded={(index) => index < items.length}
            itemCount={total || items.length + (isFetching ? pageSize : 0)}
            loadMoreItems={async (start, end) => {
              if (page < totalPages && !isFetching) setPage(page + 1)
            }}
          >
            {({ onItemsRendered, ref }) => (
              <List
                height={Math.min(600, typeof window!=='undefined' ? window.innerHeight - 260 : 600)}
                itemCount={items.length}
                itemSize={76}
                width={'100%'}
                onItemsRendered={onItemsRendered as any}
                ref={ref as any}
              >
                {Row}
              </List>
            )}
          </InfiniteLoader>
        )}
      </div>

      <div className="flex items-center gap-3">
        <button onClick={() => setPage(Math.max(1, page-1))} className="rounded-lg border px-3 py-1">Prev</button>
        <div className="text-sm">Page {page} / {totalPages} ({total} sites)</div>
        <button onClick={() => setPage(Math.min(totalPages, page+1))} className="rounded-lg border px-3 py-1">Next</button>
        <select className="ml-auto rounded border px-2 py-1" value={pageSize} onChange={e => setPageSize(parseInt(e.target.value))}>
          {[25,50,100,200].map(n => <option key={n} value={n}>{n}/page</option>)}
        </select>
        <a href="/api/sites.csv" className="rounded-lg border px-3 py-1">Export CSV</a>
      </div>

      {/* Bulk actions */}
      {selected.size > 0 && (
        <div className="fixed bottom-4 left-1/2 -translate-x-1/2 card px-4 py-2 flex items-center gap-3 shadow-lg">
          <div className="text-sm">{selected.size} selected</div>
          <button disabled={role!=='admin'} className="rounded-lg border px-3 py-1 disabled:opacity-50" onClick={async ()=>{
            const ids = Array.from(selected)
            const p = Promise.all(ids.map(id => trigger.mutateAsync({ siteId: id })))
            toast.promise(p, { loading: `Triggering ${ids.length} checks…`, success: 'Checks queued', error: 'Failed to queue' })
          }}>Trigger checks</button>
          <input value={bulkTagText} onChange={e=>setBulkTagText(e.target.value)} placeholder="tags (comma)" className="rounded border px-2 py-1 text-sm" />
          <button disabled={role!=='admin'} className="rounded-lg border px-3 py-1 disabled:opacity-50" onClick={async ()=>{
            const ids = Array.from(selected)
            const add = bulkTagText.split(',').map(t=>t.trim()).filter(Boolean)
            if (!add.length) return
            const p = bulkTag.mutateAsync({ ids, add })
            toast.promise(p, { loading: 'Adding tags…', success: 'Tags added', error: 'Failed' })
          }}>Add tags</button>
          <button disabled={role!=='admin'} className="rounded-lg border px-3 py-1 disabled:opacity-50" onClick={async ()=>{
            const ids = Array.from(selected)
            const removeTags = bulkTagText.split(',').map(t=>t.trim()).filter(Boolean)
            if (!removeTags.length) return
            const p = bulkTag.mutateAsync({ ids, remove: removeTags })
            toast.promise(p, { loading: 'Removing tags…', success: 'Tags removed', error: 'Failed' })
          }}>Remove tags</button>
          <a className="rounded-lg border px-3 py-1" href={`/api/sites.selected.csv?ids=${Array.from(selected).join(',')}`}>Export selected</a>
          <button disabled={role!=='admin'} className="rounded-lg border px-3 py-1 text-red-600 disabled:opacity-50" onClick={async ()=>{
            if (!confirm(`Delete ${selected.size} sites?`)) return
            const ids = Array.from(selected)
            const p = Promise.all(ids.map(id => remove.mutateAsync({ id })))
            toast.promise(p, { loading: `Deleting ${ids.length} sites…`, success: 'Deleted', error: 'Failed to delete' })
            setSelected(new Set())
          }}>Delete</button>
          <button className="rounded-lg border px-3 py-1" onClick={()=> setSelected(new Set())}>Clear</button>
        </div>
      )}

      {/* Dialog renders content */}
    </div>
  )
}

